//---------------------------------------------
// Includes
//---------------------------------------------
#include "common/include.h"
#include "metaphor_structs.h"
#include "metaphor_enums.bt"

typedef struct (short index)
{
  SetRandomBackColor();
  
  SkillNormalFlags Flags;
  SkillUseConditions Usable_In <name="Usable in">;
  SkillScalingType Phys_Or_Mag <name="Scaling Type">;
  SkillRangeType Range;
  CostTypeEnum Cost_Type<name="Cost Type">;
  u16 SkillPercentCost <name="% Cost">;
  u16 SkillValueCost <name="Value Cost">;
  u16 Field0A;
  TargetCount Target_Count<name="Target Count">;
  TargetSide Target_Side<name="Target Side">;
  TargetCondition Target_Condition<name="Target Condition">;
  u8 Field0F;
  u8 Field10;
  u8 Field11;
  u8 Field12;
  u8 Field13;
  u8 Accuracy;
  u8 Min_Hit_Count <name="Min Hit Count">;
  u8 Max_Hit_Count <name="Max Hit Count">;
  DamageType HP_Damage_Type <name="HP Effect">;
  u16 SkillPower <name="HP Effect Value">;
  DamageType MP_Damage_Type <name="MP Effect">;
  u8 Field1A;
  u8 MPDrainPower <name="MP Effect Value">;
  u8 Field1C;
  ApplyOrCure Apply_Cure <name="Apply/Cure Ailment">;
  u8 ProbabilityApplyCure<name="% of Chance to Apply/Cure">;
  struct
        {
            bool Poison : 1 <name = "Poison">;
            bool Malady : 1 <name = "Malady">;
            bool Paralysis : 1 <name = "Paralysis">;
            bool Hex : 1 <name = "Hex">;
            bool Burn : 1 <name = "Burn">;
            bool Frostbite : 1 <name = "Frostbite">;
            bool Unknown : 1 <name = "Unknown">;
            bool Unknown1 : 1 <name = "Unknown">;
        } AilmentEffectss <name = "Ailments 1">;
  struct
	{
		bool Unknown : 1 <name = "Unknown">;
		bool Unknown1 : 1 <name = "Unknown">;
		bool Unknown2 : 1 <name = "Unknown">;
		bool Unknown3 : 1 <name = "Unknown">;
		bool Charm : 1 <name = "Charm">;
		bool Daze : 1 <name = "Daze">;
		bool Forget : 1 <name = "Forget">;
		bool Sleep : 1 <name = "Sleep">;
	} AilmentEffectss2 <name = "Ailments 2">;
	struct
	{
		bool Rage : 1 <name = "Rage">;
		bool Anxiety : 1 <name = "Anxiety">;
		bool Unknown1 : 1 <name = "Unknown">;
		bool Death : 1 <name = "Death">;
		bool Unknown2 : 1 <name = "Unknown">;
		bool Unknown3 : 1 <name = "Unknown">;
		bool Unknown4 : 1 <name = "Unknown">;
		bool Unknown5 : 1 <name = "Unknown">;
	} AilmentEffectss3 <name = "Ailments 3">;
	struct
	{
		bool Unknown : 1 <name = "Unknown">;
		bool Unknown1 : 1 <name = "Unknown">;
		bool Unknown2 : 1 <name = "Unknown">;
		bool Unknown3 : 1 <name = "Unknown">;
		bool Unknown4 : 1 <name = "Unknown">;
		bool Unknown5 : 1 <name = "Unknown">;
		bool Unknown6 : 1 <name = "Unknown">;
		bool Unknown7 : 1 <name = "Unknown">;
	} AilmentEffectss4 <name = "Ailments 4">;
  BuffDebuffEffectType OneTime <name="Buff or Debuff Application">;
  u16 Field26;
  u8 BuffStages <name="Buff Stages">;
  SpecialEffectType SpecialEffect <name="Special Effect">;
  u16 CriticalChance <name="Critical Chance">;
  u16 Field2C;
  u16 Field2E;

  local SkillID skillId = index;
} SkillNormalTBL <optimize=false, read=Str("%s", EnumToString(skillId))>; // size=0x30, 


typedef struct
{
  local short i;
  for(i = 0; i < FileSize() / 0x30; i++) {
    //FollowerStruct Followers(i) <name="Follower data">;
    SkillNormalTBL Entries(i);
  }
} Bin <optimize=false>;

Bin bin;